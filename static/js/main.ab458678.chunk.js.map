{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeHolder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab458678.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n\r\n    const inputRef = useRef(null)\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus()\r\n    })\r\n\r\n    const handleChange = e => {\r\n        setInput(e.target.value); // to get input\r\n    }\r\n\r\n    const handleSubmit = e => { //so that it does not reload when button is clicked\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000),\r\n            text: input\r\n        });\r\n\r\n        setInput(''); // so that it changes to empty string\r\n    }\r\n\r\n\r\n\r\n    return ( <\r\n        form className = \"todo-form\"\r\n        onSubmit = { handleSubmit } > {\r\n            props.edit ? ( < > < input type = 'text'\r\n                placeHolder = 'Update the todo'\r\n                value = { input }\r\n                name = 'text'\r\n                className = 'todo-input'\r\n                onChange = { handleChange }\r\n                ref = { inputRef }\r\n                /> <\r\n                button className = 'todo-button edit' > Update < /button> </ > ) :\r\n                ( <\r\n                    >\r\n                    <\r\n                    input type = 'text'\r\n                    placeHolder = 'Add a todo'\r\n                    value = { input }\r\n                    name = 'text'\r\n                    className = 'todo-input'\r\n                    onChange = { handleChange }\r\n                    ref = { inputRef }\r\n                    /> <\r\n                    button className = 'todo-button' > Add todo < /button> <\r\n                    />\r\n\r\n                )\r\n        }\r\n\r\n        <\r\n        /form>\r\n    )\r\n}\r\n\r\nexport default TodoForm;","import React, { useState } from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport TodoList from './TodoList'\r\nimport { TiEdit } from 'react-icons/ti';\r\nimport { RiCloseCircleLine } from \"react-icons/ri\";\r\n\r\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo }) {\r\n\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    });\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value)\r\n        setEdit({\r\n            id: null,\r\n            value: ''\r\n        })\r\n    }\r\n\r\n    if (edit.id) {\r\n        return <TodoForm edit = { edit }\r\n        onSubmit = { submitUpdate }\r\n        />\r\n    }\r\n\r\n    return todos.map((todo, index) => ( <\r\n        div className = { todo.isComplete ? 'todo-row complete' : 'todo-row' }\r\n        key = { index } >\r\n        <\r\n        div key = { todo.id }\r\n        onClick = {\r\n            () => completeTodo(todo.id) } > { todo.text } <\r\n        /div> <\r\n        div className = 'icons' >\r\n\r\n        <\r\n        TiEdit onClick = {\r\n            () => setEdit({ id: todo.id, value: todo.text }) }\r\n        className = 'edit-icon' / >\r\n        <\r\n        RiCloseCircleLine onClick = {\r\n            () => removeTodo(todo.id) }\r\n        className = 'delete-icon' / >\r\n\r\n\r\n        <\r\n        /div>\r\n\r\n        <\r\n        /div>\r\n    ));\r\n};\r\n\r\nexport default Todo;","import React, { useState } from 'react'\r\nimport Todo from './Todo';\r\nimport TodoForm from './TodoForm'\r\n\r\nfunction TodoList() {\r\n\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    const addTodo = todo => {\r\n        if (!todo.text || /^\\s*$/.test(todo.text)) { // white space\r\n            return;\r\n        }\r\n\r\n        const newTodos = [todo, ...todos]; //set new todos array\r\n\r\n        setTodos(newTodos);\r\n    };\r\n\r\n    const removeTodo = id => {\r\n        const removeArr = [...todos].filter(todo => todo.id !== id)\r\n        setTodos(removeArr);\r\n    };\r\n\r\n    const updateTodo = (todoId, newValue) => {\r\n\r\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) { // white space\r\n            return;\r\n        }\r\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)))\r\n\r\n    };\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n    };\r\n\r\n    return ( <\r\n        div >\r\n        <\r\n        h1 > Plan your todos! < /h1> <\r\n        TodoForm onSubmit = { addTodo }\r\n        /> <\r\n        Todo todos = { todos }\r\n        completeTodo = { completeTodo }\r\n        removeTodo = { removeTodo }\r\n        updateTodo = { updateTodo }\r\n        /> <\r\n        /div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n    return ( <\n        div className = \"todo-app\" >\n        <\n        h1 >\n        Todo eluthuda <\n        /h1> <\n        TodoList / >\n        <\n        /div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render( <\n    React.StrictMode >\n    <\n    App / >\n    <\n    /React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}